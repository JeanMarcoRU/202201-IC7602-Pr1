version: '3.7' #sudo docker-compose up -d

services:
  # DHCP 1 | IP: 10.0.0.4
  dhcp1:    
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.4
    image: networkboot/dhcpd
    restart: unless-stopped
    volumes:
      - ./dhcp1/data:/data

  # DHCP 2 | IP: 10.0.1.5
  dhcp2:
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.5
    image: networkboot/dhcpd
    restart: unless-stopped
    volumes:
      - ./dhcp2/data:/data

  #proxy reverso
  proxy_reverso:
    #si se entra al ip del proxy (http://10.0.0.20/) y se recarga (f5) hace round robin entre los servidores

    #ab -c 100 -n 10000 http://10.0.0.20/web2/

    #web cache aqui, mejoria de casi un 50%
    #ab -c 100 -n 10000 http://10.0.0.20/web1/ 

    image: nginx #https://hub.docker.com/r/jwilder/nginx-proxy
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80" 
      - "443:443" 
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.20

  #proxy reverso
  web_cache:
    #si se entra al ip del proxy (http://10.0.0.20/) y se recarga (f5) hace round robin entre los servidores

    #ab -c 100 -n 10000 http://10.0.0.20/web2/

    #web cache aqui, mejoria de casi un 50%
    #ab -c 100 -n 10000 http://10.0.0.20/web1/ 

    image: nginx #https://hub.docker.com/r/jwilder/nginx-proxy
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3128:3128" 
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.7

  # Web server 1 | IP: 10.0.0.21
  web_server_1:
    #curl -H "Host: web1.local" localhost
    image: nginx
    volumes:
      - ./app:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web1.local
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.21

  # Web server 1.2 | IP: 10.0.0.22 para probar el Round Robin del proxy reverso
  web_server_1_2:
    #curl -H "Host: web1.local" localhost
    image: nginx
    volumes:
      - ./app2:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web2.local
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.22

  # Web server 2 | IP: 10.0.1.21
  web_server_2:
    #curl -H "Host: web2.local" localhost
    image: nginx
    volumes:
      - ./app2:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web2.1.local
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.21

  #cliente 1
  cliente1:    
    networks:
      - LAN_Virtual_1
    build: ./dhclient1
    depends_on:
      - dhcp1
    privileged: true
    command: bash -c "dhclient -s 10.0.0.4 -nw && tail -F duermase"
    container_name: cliente1
  #$ docker build -t cliente ./dhclient1 
  #$ docker run --privileged --name clienteA --network=demo_LAN_Virtual_1 -d cliente bash -c "dhclient -s 10.0.0.4 -nw && tail -F duermase"
  #cliente 2
  cliente2:
    networks:
      - LAN_Virtual_2
    build: ./dhclient2
    depends_on:
      - dhcp1
    privileged: true
    command: bash -c "dhclient -s 10.0.1.5 -nw && tail -F duermase"
    container_name: cliente2
  #$ docker build -t cliente ./dhclient2
  #$ docker run --privileged --name clienteB --network=demo_LAN_Virtual_2 -d cliente bash -c "dhclient -s 10.0.1.5 -nw && tail -F duermase"
  
  #DNS - https://www.techrepublic.com/article/how-to-define-dns-in-docker-containers/
  service:
    # sudo docker exec -it rabbitmq bash 
    # cat /etc/resolv.conf
    dns:
      - "8.8.8.8"
      - "8.8.8.9"   
    network_mode: "bridge" 
    image: rabbitmq:3-management #https://hub.docker.com/_/rabbitmq?tab=description
    container_name: rabbitmq #https://github.com/docker-library/rabbitmq/blob/6e226fe8e99702c8726d5e7d5c5864e69548048d/3.10/ubuntu/management/Dockerfile
    hostname: rabbitmq
    expose:
      - 53/udp
      - 53/tcp
    #networks:      
    #  LAN_Virtual_1:        
    #    ipv4_address: 10.0.0.3
    

# En caso de que se sobre-lapen las redes
# sudo docker network ls
# sudo docker network rm my_network
volumes:
  app: {}
  app2: {}

# LANs Virtuales 1 y 2
networks:
  # LAN virtual 1 10.0.0.0/24
  LAN_Virtual_1:    
    ipam:
      config:
        - subnet: 10.0.0.0/24

  # LAN virtual 2 10.0.1.0/24
  LAN_Virtual_2:
    ipam:
      config:
        - subnet: 10.0.1.0/24
