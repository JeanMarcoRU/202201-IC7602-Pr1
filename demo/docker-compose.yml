version: '3.7' #sudo docker-compose up -d     #sudo docker-compose build

services:

  # DHCP 1 | IP: 10.0.0.4
  dhcp1:    
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.4
    image: networkboot/dhcpd
    volumes:
      - ./dhcp1/data:/data

  # DHCP 2 | IP: 10.0.1.5
  dhcp2:
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.5
    image: networkboot/dhcpd
    volumes:
      - ./dhcp2/data:/data

  #proxy reverso
  proxy_reverso:
    build: 
      context: ./ubuntu #carpeta con el dockerfile
      dockerfile: Dockerfile # Archivo de imagen
    #si se entra al ip del proxy (http://10.0.0.20/) y se recarga (f5) hace round robin entre los servidores

    #ab -c 100 -n 10000 http://10.0.0.20/web2/

    #web cache aqui, mejoria de casi un 50%
    #ab -c 100 -n 10000 http://10.0.0.20/web1/ 

    image: nginx #https://hub.docker.com/r/jwilder/nginx-proxy
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    expose:
      - 80 
      - 443
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.20

  #proxy reverso
  web_cache:
    build: 
      context: ./ubuntu #carpeta con el dockerfile
      dockerfile: Dockerfile # Archivo de imagen
    #si se entra al ip del proxy (http://10.0.0.20/) y se recarga (f5) hace round robin entre los servidores

    #ab -c 100 -n 10000 http://10.0.0.20/web2/

    #web cache aqui, mejoria de casi un 50%
    #ab -c 100 -n 10000 http://10.0.0.20/web1/ 

    image: nginx #https://hub.docker.com/r/jwilder/nginx-proxy
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    expose:
      - 3128
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.7

  # Web server 1 | IP: 10.0.0.21
  web_server_1:
    command: sh -c " ip route replace default via 10.0.0.5"
    #curl -H "Host: web1.local" localhost
    image: nginx
    volumes:
      - ./webserver1:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web1.local
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.21

  # Web server 1.2 | IP: 10.0.0.22 para probar el Round Robin del proxy reverso
  web_server_1_2:
    #curl -H "Host: web1.local" localhost
    image: nginx
    volumes:
      - ./webserver2:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web2.local
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.22

  # Web server 2 | IP: 10.0.1.21
  web_server_2:
    #curl -H "Host: web2.local" localhost
    image: nginx
    volumes:
      - ./webserver2:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=web2.1.local
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.21

  # Router 1      
  router_1:
    build: 
      context: ./ubuntu #carpeta con el dockerfile
      dockerfile: Dockerfile # Archivo de imagen
    container_name: router_1
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.tcp_timestamps=0
    volumes:
      - "./router1/sysctl.conf:/etc/sysctl.conf"
    ports:
      - "80:80"
      - "443:443"
    command: >-
      sh -c "  ip route add 10.0.1.0/24 via 172.30.0.4 && iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE &&
      iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE &&
      ip route replace default via 10.0.0.5 &&
      iptables -A FORWARD -i eth1 -j ACCEPT &&
      iptables -A FORWARD -i eth0 -j ACCEPT &&
      iptables --append FORWARD --protocol udp --src 10.0.0.5 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 80 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 443 --jump ACCEPT &&
      iptables --append INPUT --protocol tcp --src 10.0.0.5 --sport 80 --jump ACCEPT &&
      iptables --append INPUT --protocol tcp --src 10.0.0.5 --sport 443 --jump ACCEPT &&
      iptables --append INPUT --protocol tcp --src 10.0.0.5 --sport 3128 --jump ACCEPT &&
      iptables --append INPUT --protocol tcp --src 10.0.0.5 --sport 8443 --jump ACCEPT &&
      iptables --append INPUT --protocol udp --src 10.0.0.5 --sport 53 --jump ACCEPT &&
      iptables --append INPUT --protocol tcp --src 10.0.0.5 --sport 53 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 80 --dst 10.0.0.20 --dport 80 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 443 --dst 10.0.0.20 --dport 443 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 3128 --dst 10.0.0.7 --jump ACCEPT &&
       iptables --append FORWARD --protocol tcp --src 10.0.0.5 --sport 8443 --dst 10.0.0.10 --jump ACCEPT &&  
      tail -f /dev/null"

    networks:
      host-bridge:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.5
      internet:
        ipv4_address: 172.30.0.2

  # Router 2  
  router_2:
    build: 
      context: ./ubuntu
      dockerfile: Dockerfile
    container_name: router_2
    privileged: true
    command: >-
      sh -c " ip route add 10.0.0.0/24 via 172.30.0.2 &&  ip route replace default via  172.30.0.2 && iptables --append FORWARD --protocol icmp --icmp-type any --src 10.0.1.4 --dst 10.0.0.5 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.1.4 --sport 80 --dst 10.0.0.5 --jump ACCEPT &&
      iptables --append FORWARD --protocol tcp --src 10.0.1.4 --sport 443 --dst 10.0.0.5 --jump ACCEPT &&     
      tail -f /dev/null"

    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.tcp_timestamps=0
    volumes:
      - "./router1/sysctl.conf:/etc/sysctl.conf"
    networks:
      host-bridge:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.4
      internet:
        ipv4_address: 172.30.0.4

  #cliente 1
  cliente1:    
    networks:
      - LAN_Virtual_1
    build: 
      context: ./dhclient1
      dockerfile: Dockerfile
    depends_on:
      - dhcp1
    privileged: true
    command: bash -c "ip route replace default via 10.0.0.5 && dhclient -s 10.0.0.4 -nw && tail -F duermase" 
    container_name: cliente1
  #$ docker build -t cliente ./dhclient1 
  #$ docker run --privileged --name clienteA --network=demo_LAN_Virtual_1 -d cliente bash -c "dhclient -s 10.0.0.4 -nw && tail -F duermase"
  #cliente 2
  cliente2:
    networks:
      - LAN_Virtual_2
    build: ./dhclient2
    depends_on:
      - dhcp1
    privileged: true
    command: bash -c "ip route replace default via 10.0.1.4 && dhclient -s 10.0.1.5 -nw && tail -F duermase"
    container_name: cliente2
  #$ docker build -t cliente ./dhclient2
  #$ docker run --privileged --name clienteB --network=demo_LAN_Virtual_2 -d cliente bash -c "dhclient -s 10.0.1.5 -nw && tail -F duermase"   

  #DNS - https://www.techrepublic.com/article/how-to-define-dns-in-docker-containers/
  dns:
    # docker exec -it rabbitmq bash 
    # cat /etc/resolv.conf
    dns:
      - "8.8.8.8"
      - "8.8.8.9"
    network_mode: "bridge"
    image: rabbitmq:3-management #https://hub.docker.com/_/rabbitmq?tab=description
    container_name: dns
    hostname: rabbitmq
    ports:
      - "15672:15672"
  vpn:
    privileged: true
    container_name: vpn
    cap_add:
      - NET_ADMIN
    build: ./vpn
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.10
    ports: 
      - "8444:8443/tcp"
    volumes:
      - ./vpn/client.ovpn:/client.ovpn
    command: bash -c "cp client.ovpn /etc/openvpn/client.conf && openvpn --client --config /etc/openvpn/client.conf && /etc/init.d/openvpn start && tail -F duermase"

networks:
  host-bridge:
    name: Host bridge
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      driver: default
  # LAN virtual 1 10.0.0.0/24
  LAN_Virtual_1:    
    ipam:
      config:
        - subnet: 10.0.0.0/24

  # LAN virtual 2 10.0.1.0/24
  LAN_Virtual_2:
    ipam:
      config:
        - subnet: 10.0.1.0/24
  internet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# docker exec -it nombre_contenedor bash

#Hay que agregar a cada uno del los elementos dentro de la red que por defecto vayan al router 1 o 2: para eso se utiliza la siguiente linea de comando: 
#command: >-
#     sh -c " ip route replace default via 10.0.1.4"      para el router 2
#command: >-
#     sh -c " ip route replace default via 10.0.0.5"      para el router 1
# esos comandos deben de correrse dentro de cada contenedor que este en la lan_1 para router 1 y en lan2 para router2 y para probar que funciona se debe de entrar a cada contenedor una vez levantado