version: '3.7' #sudo docker-compose up -d

services:
  cliente1:
    networks:
      - LAN_Virtual_1
    image: ubuntu
    command: tail -F anything

  # DHCP 1 | IP: 10.0.0.4
  dhcp1:
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.4
    #network_mode: "host"
    image: networkboot/dhcpd
    restart: unless-stopped
    volumes:
      - ./dhcp1/dhcpd.conf:/data/dhcpd.conf

  # DHCP 1 | IP: 10.0.1.5
  dhcp2:
    image: networkboot/dhcpd
    restart: unless-stopped
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.5
    #network_mode: "host"
    volumes:
      - ./dhcp2/dhcpd.conf:/data/dhcpd.conf
proxy_reverso:
    image: jwilder/nginx-proxy    #https://hub.docker.com/r/jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.20

  # Web server 1 | IP: 10.0.0.21
  web_server_1:
    #curl -H "Host: web1.local" localhost
    image: nginx
    volumes:
      - ./app:/usr/share/nginx/html
    expose:
      - "80"
    environment:
      - VIRTUAL_HOST=web1.local
    networks:
      LAN_Virtual_1:
        ipv4_address: 10.0.0.21

  # Web server 2 | IP: 10.0.1.21
  web_server_2:
    #curl -H "Host: web2.local" localhost
    image: nginx
    volumes:
      - ./app2:/usr/share/nginx/html
    expose:
      - "80"
    environment:
      - VIRTUAL_HOST=web2.local
    networks:
      LAN_Virtual_2:
        ipv4_address: 10.0.1.21

# En caso de que se sobre-lapen las redes
# sudo docker network ls
# sudo docker network rm my_network
volumes:
  app: {}
  app2: {}

# LANs Virtuales 1 y 2
networks:
  # LAN virtual 1 10.0.0.0/24
  LAN_Virtual_1:
    ipam:
      config:
        - subnet: 10.0.0.0/24

  # LAN virtual 2 10.0.1.0/24
  LAN_Virtual_2:
    ipam:
      config:
        - subnet: 10.0.1.0/24
